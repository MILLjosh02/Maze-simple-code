import tools.*;
import java.util.Stack;

public class Maze
{
    int xpos,ypos;

    class point
    {
        public int x;
        public int y;
    }

    Stack <point> S = new Stack<>();

    int maze[][] = 
    {
        {91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91},
        {91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91},
        {91,91,91,91,91,91,91,91,91,91,00,00,00,00,91,91,91,91,91,91,91,91,00,91,91,91,91,91,91,91,91,91,91,00,00,00,00,91,91,91,91,91,91,91,91,91,91,91,91,91},
        {00,00,00,91,91,91,91,91,91,91,00,91,91,00,91,00,00,00,00,00,00,00,00,00,00,00,00,91,91,91,91,91,91,00,91,91,00,91,91,91,91,91,91,91,91,91,91,91,00,91},
        {91,91,00,91,91,91,91,91,91,91,00,91,91,00,91,91,00,91,91,91,91,91,91,91,91,91,00,91,91,91,91,00,00,00,91,91,00,91,91,91,91,91,91,91,91,91,91,91,00,91},
        {91,91,00,91,91,91,91,91,91,91,00,91,91,00,00,00,00,91,91,91,91,91,91,91,91,91,00,91,91,91,91,00,91,91,91,91,00,91,91,91,00,00,00,00,00,00,00,00,00,91},
        {91,91,00,00,00,91,91,91,00,91,00,91,91,91,91,91,00,91,91,91,91,91,91,91,91,91,00,91,91,91,91,00,91,91,91,91,00,91,91,91,00,91,91,91,91,00,91,91,91,91},
        {91,91,00,91,91,91,00,91,91,91,00,91,91,91,91,91,00,00,00,00,00,00,00,00,00,91,00,00,91,91,91,00,91,91,91,91,00,91,91,91,00,91,91,91,91,00,91,91,91,91},
        {91,91,00,91,91,91,00,91,91,91,00,91,91,91,91,91,91,91,91,91,00,91,91,91,00,91,91,00,91,91,91,00,91,91,91,91,00,00,00,00,00,91,91,91,91,00,91,91,91,91},
        {91,00,00,00,00,00,00,91,91,91,91,91,91,91,91,91,91,91,91,91,00,91,91,91,00,91,91,00,00,00,00,00,91,91,91,91,91,91,91,91,91,91,00,00,00,00,00,91,91,91},
        {91,91,91,91,00,91,91,91,91,91,91,91,91,91,00,00,00,00,91,91,00,91,91,91,00,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,00,00,00,91,91,00,91,91,91,91},
        {91,91,91,91,00,91,91,91,91,91,91,00,00,00,00,91,91,00,91,91,00,91,91,91,00,00,00,00,00,00,00,00,00,00,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91},
        {91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,91,91,00,91,91,00,91,91,91,00,91,91,91,00,91,91,91,00,91,91,91,91,91,91,91,91,91,00,00,00,00,00,00,00,00},
        {91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,00,91,91,91,00,91,91,91,91,91,91,91,91,91,00,91,91,91,91,91,91,91},
        {91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,00,91,91,91,00,91,91,91,91,00,00,00,91,91,00,00,91,91,91,91,91,91},
        {91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,91,91,00,91,91,91,91,91,91,00,91,91,00,00,91,91,91,00,91,91,91,91,00,91,00,91,91,00,91,91,91,91,91,91,91},
        {91,91,91,91,00,91,91,91,91,91,91,00,91,91,91,00,00,00,91,91,91,91,91,91,00,91,91,00,91,91,91,91,00,91,91,91,91,00,91,00,00,00,00,00,00,00,00,00,91,91},
        {91,91,91,91,00,00,00,00,00,00,91,00,00,00,00,91,91,00,00,91,91,91,91,91,00,91,91,00,00,00,91,91,00,00,00,00,00,00,00,00,91,91,91,91,91,91,91,91,91,91},
        {91,91,91,91,91,91,91,91,00,91,91,00,91,91,00,91,00,00,00,00,00,00,00,00,00,91,91,91,91,91,91,91,00,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91},
        {91,91,91,91,91,91,91,91,00,00,00,00,91,91,00,91,91,91,91,91,91,00,91,91,91,91,91,91,91,91,91,91,00,91,91,91,91,91,91,91,91,91,91,00,00,00,00,91,91,91},
        {91,91,00,00,91,91,91,91,00,91,91,91,91,91,00,91,91,91,91,91,91,00,91,91,00,00,00,91,91,91,91,91,00,00,00,00,00,00,00,00,00,00,91,00,91,91,00,91,91,91},
        {91,91,00,91,91,91,91,91,00,91,91,91,91,91,00,91,91,91,91,91,91,00,91,91,00,91,00,91,00,00,91,91,00,91,00,91,91,91,91,91,91,00,91,00,91,91,00,91,91,91},
        {91,91,00,00,00,00,00,00,00,91,91,91,00,00,00,00,00,00,91,91,91,00,91,91,00,91,00,00,00,91,91,91,00,91,00,91,91,91,91,91,91,00,00,00,91,91,00,91,91,91},
        {91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,00,00,00,00,91,91,91,91,91,91,91,00,91,91,91,91,91,91,91,91,00,91,91,91,91,91,91,91,91},
        {91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91}
    };

    public void cls()
    {
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }

    public static void printxy(int col, int row, String val)
    {
        char escCode = 0x1B;
        System.out.print(String.format("%s[%d;%df", escCode, row, col));
        System.out.print(val);
    }

    public static void printxy(int col, int row, char val)
    {
        char escCode = 0x1B;
        System.out.print(String.format("%s[%d;%df", escCode, row, col));
        System.out.print(val);
    }

    void DisplayMaze(int x, int y)
    {
        for (int i = 0; i < 25; i++)
        {
            for (int j = 0; j < 50; j++)
            {
                if(maze[i][j] == 0)
                    printxy(x + j, y + i, " ");
                else 
                    printxy(x + j,y + i, Symbols.EXTENDED[maze[i][j]]);
            }
            System.out.println(" ");
        }
    }

    void DisplayMouse()
    {
        printxy(xpos,ypos,"X");
    }

    void HideMouse()
    {
        printxy(xpos,ypos," ");
    
    }
   
    boolean IDidNotComeFromThisPoint(int fx, int fy)
    {
        if(S.empty())
            return true;
        
        point p;
        p = S.peek();

        if(p.x == fx && p.y == fy)
            return false;
        return true;
    }

    void nextMove()
    {
        if ((maze[ypos+1][xpos] == 0) && IDidNotComeFromThisPoint(xpos, ypos+1))
        {
            point p = new point();
            p.x = xpos;
            p.y = ypos;
            S.push(p);

            ypos++;
        } 
        else if ((maze[ypos][xpos+1] == 0) && IDidNotComeFromThisPoint(xpos+1,ypos))
        {
            point p = new point();
            p.x = xpos;
            p.y = ypos;
            S.push(p);

            xpos++;
        } 
        else if((maze[ypos-1][xpos] == 0) && IDidNotComeFromThisPoint(xpos, ypos-1))
        {
            point p = new point();
            p.x = xpos;
            p.y = ypos;
            S.push(p);

            ypos--;
        }
        else if ((maze[ypos][xpos-1] == 0) && IDidNotComeFromThisPoint(xpos-1, ypos))
        {
            point p = new point();
            p.x = xpos;
            p.y = ypos;
            S.push(p);

            xpos--;
        } else 
        {
            maze[ypos][xpos]=91;
            point p = S.pop();
            xpos = p.x;
            ypos = p.y;

        }
    }

    public void Play()
    {
        cls();
        DisplayMaze(0,0);

        xpos = 0;
        ypos = 3;
        printxy(xpos,ypos,"X");

        while(xpos != 49 )
        {
            DisplayMouse();
            try
            {
                Thread.sleep(200);
            }
            catch (Exception e){
                System.out.println(e);
            }
            HideMouse();
            nextMove();
        }
        System.out.println("YOU MADE IT OUT ALIVE!!!");
    }

}